{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Cards/Cards.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","deaths","recovered","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url1","url2","fetchData","a","axios","get","fetchDailyData","modifiedData","map","dailyData","totalConfirmed","total","date","reportDate","fetchCountries","Country","sort","fetchCountryHistory","country","mappedData","Confirmed","Recovered","Deaths","active","Active","Charts","useState","setDailyData","filteredData","filter","getTime","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","countryLineChart","split","style","fontSize","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","hash","decodeURI","window","location","substring","FormControl","formControl","NativeSelect","defaultValue","onChange","ev","target","countryName","i","key","App","state","countryData","countryHistory","setState","fetchedData","this","image","src","alt","Chart","marginTop","Link","href","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6cf14230.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","import React from 'react';\nimport { Card, Typography, CardContent, Grid } from '@material-ui/core';\nimport styles from './Cards.module.css'\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nconst Cards = ({ data: { confirmed, deaths, recovered, lastUpdate } }) => {\n    if (!confirmed) {\n        return 'Loading...';\n    }\n\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp  start={0} end={confirmed.value} duration={2} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of total COVID-19 cases</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp  start={0} end={recovered.value} duration={2} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp  start={0} end={deaths.value} duration={2} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    );\n};\n\nexport default Cards;","import axios from 'axios';\n\nconst url1 = 'https://covid19.mathdro.id/api';\nconst url2 = 'https://api.covid19api.com';\n\nexport const fetchData = async () => {\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(url1);     \n        \n        return  { confirmed, recovered, deaths, lastUpdate };\n    } catch (error) {\n        return(error);\n    }\n};\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url1}/daily`);\n        \n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.totalConfirmed,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate\n        }));\n\n        return modifiedData;\n    } catch (error) {\n        return error;\n    }\n};\n\nexport const fetchCountries = async () => {\n    try {\n        const { data } = await axios.get(`${url2}/countries`);\n    \n        return data.map((item) => item.Country).sort();\n    } catch (error) {\n        return(error);        \n    }  \n};\n\nexport const fetchCountryHistory = async (country) => {\n    try {\n        const { data } = await axios.get(`${url2}/total/dayone/country/${country}`);\n        \n        const mappedData = data.map((item) => ({\n            confirmed: item.Confirmed,\n            recovered: item.Recovered,\n            deaths: item.Deaths,\n            active: item.Active,\n            date: item.Date\n        }));\n\n        return mappedData;\n    } catch (error) {\n        return error;\n    }\n};\n","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line } from 'react-chartjs-2';\nimport { Typography } from '@material-ui/core';\n\nimport styles from './Chart.module.css';\n\nconst Charts = ({ data, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n  const filteredData = data?.filter(\n    ({ date, active }) =>\n      new Date(date).getTime() >= new Date('2020-08-01').getTime() &&\n      active !== 269275\n  );\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    fetchAPI();\n  }, []);\n\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: 'Infected',\n            borderColor: '#3333ff',\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: 'Deaths',\n            borderColor: 'rgba(170, 0, 0, 1)',\n            backgroundColor: 'rgba(255 , 0, 0, .5)',\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n\n  const countryLineChart = filteredData.length ? (\n    <Line\n      data={{\n        labels: filteredData.map(({ date }) => date.split('T')[0]),\n        datasets: [\n          //   {\n          //     data: data.map(({ confirmed }) => confirmed),\n          //     label: 'Infected',\n          //     borderColor: '#3333ff',\n          //     fill: true,\n          //   },\n          {\n            data: filteredData.map(({ deaths, date }) => {\n              return deaths;\n            }),\n            label: 'Deaths',\n            borderColor: 'rgba(170, 0, 0, 1)',\n            backgroundColor: 'rgba(255, 0, 0, .5)',\n            fill: true,\n          },\n          {\n            data: filteredData.map(({ active, date }) => {\n              return active;\n            }),\n            label: 'Active',\n            borderColor: 'rgba(170, 170, 0, 1)',\n            backgroundColor: 'rgba(255, 255, 0, .5)',\n            fill: true,\n          },\n          //   {\n          //     data: data.map(({ recovered }) => recovered),\n          //     label: 'Recovered',\n          //     borderColor: 'green',\n          //     backgroundColor: 'rgba(0, 255, 0, .5)',\n          //     fill: true,\n          //   },\n        ],\n      }}\n    />\n  ) : (\n    <Typography style={{ fontSize: '24px' }}>\n      We could not load data for this location, you can pick another one!\n    </Typography>\n  );\n\n  return (\n    <div className={styles.container}>\n      {country ? countryLineChart : lineChart}\n    </div>\n  );\n};\n\nexport default Charts;\n","import React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl} from '@material-ui/core';\nimport { fetchCountries } from '../../api';\n\nimport styles from './CountryPicker.module.css';\n\nconst CountryPicker = ({ handleCountryChange }) => {\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n    const hash = decodeURI(window.location.hash.substring(1));\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries());\n        }\n\n        if (hash) handleCountryChange(hash);\n\n        fetchAPI();\n    }, [setFetchedCountries]);\n\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue={\"\"} onChange={(ev) => handleCountryChange(ev.target.value)}>\n                <option value=\"\">{hash || 'Global'}</option>\n                {fetchedCountries.map((countryName, i) => <option key={i} value={countryName}>{countryName}</option> )}\n            </NativeSelect>\n        </FormControl>\n    );\n};\n\nexport default CountryPicker;\n","import React from 'react';\nimport { Cards, Charts, CountryPicker } from './components';\nimport { fetchData, fetchCountryHistory } from './api';\nimport { Typography, Link } from '@material-ui/core';\n\nimport styles from './App.module.css';\n\nimport image from './images/image.png';\n\nclass App extends React.Component {\n\n    state = {\n        data: {},\n        country: '',\n        countryData: []\n    }\n\n    async componentDidMount() {\n        const fetchedData = await fetchData();\n\n        this.setState({\n            data: fetchedData\n        });\n    }\n\n    handleCountryChange = async (country) => {\n        const countryHistory = await fetchCountryHistory(country);\n        window.location.hash = country;\n        this.setState({\n            countryData: countryHistory,\n            country: country\n        });\n    };\n\n    render() {\n        const {\n            data,\n            country,\n            countryData\n        } = this.state;\n\n        return (\n            <div className={styles.container}>\n                <img className={styles.image} src={image} alt=\"COVID-19\" />\n                <Cards data={data} />\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\n                <Charts data={countryData} country={country} />\n                <Typography style={{\n                    marginTop: '20px',\n                    fontSize: '12px',\n                    color: 'rgba(0, 0, 0, .5)'\n                }}\n                >Global data has been fetched from this <Link href=\"https://covid19.mathdro.id/api\" target=\"_blank\">API</Link>,\n\n                Country data has been fetched from this <Link href=\"https://documenter.getpostman.com/view/10808728/SzS8rjbc?version=latest\" target=\"_blank\">API</Link>.\n                </Typography>\n\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};"],"sourceRoot":""}