{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Cards/Cards.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","deaths","recovered","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","a","axios","get","fetchDailyData","modifiedData","map","dailyData","totalConfirmed","total","date","reportDate","fetchCountries","Country","sort","fetchCountryHistory","country","mappedData","Confirmed","Recovered","Deaths","active","Active","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","countryLineChart","split","style","fontSize","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","ev","target","countryName","i","key","App","state","countryData","countryHistory","setState","fetchedData","this","image","src","alt","Chart","marginTop","Link","href","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e5eb3913.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","import React from 'react';\nimport { Card, Typography, CardContent, Grid } from '@material-ui/core';\nimport styles from './Cards.module.css'\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nconst Cards = ({ data: { confirmed, deaths, recovered, lastUpdate } }) => {\n    if (!confirmed) {\n        return 'Loading...';\n    }\n\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp  start={0} end={confirmed.value} duration={2} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of total COVID-19 cases</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp  start={0} end={recovered.value} duration={2} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp  start={0} end={deaths.value} duration={2} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    );\n};\n\nexport default Cards;","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async () => {\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(url);     \n        \n        return  { confirmed, recovered, deaths, lastUpdate };\n    } catch (error) {\n        return(error);\n    }\n};\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n        \n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.totalConfirmed,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate\n        }));\n\n        return modifiedData;\n    } catch (error) {\n        return error;\n    }\n};\n\nexport const fetchCountries = async () => {\n    try {\n        const { data } = await axios.get(`https://api.covid19api.com/countries`);\n    \n        return data.map((item) => item.Country).sort();\n    } catch (error) {\n        return(error);        \n    }  \n};\n\nexport const fetchCountryHistory = async (country) => {\n    try {\n        const { data } = await axios.get(`https://api.covid19api.com/total/dayone/country/${country}`);\n        \n        const mappedData = data.map((item) => ({\n            confirmed: item.Confirmed,\n            recovered: item.Recovered,\n            deaths: item.Deaths,\n            active: item.Active,\n            date: item.Date\n        }));\n\n        return mappedData;\n    } catch (error) {\n        return error;\n    }\n};\n","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line } from 'react-chartjs-2';\nimport { Typography } from '@material-ui/core';\n\nimport styles from './Chart.module.css';\n\n\nconst Charts = ({ data, country }) => {  \n    const [ dailyData, setDailyData ] = useState([]);\n    \n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        } \n        \n        fetchAPI();\n    }, []);\n    \n    \n    const lineChart = (\n        dailyData.length \n            ? (\n                <Line \n                data={{\n                    labels: dailyData.map(({ date }) => date),\n                    datasets: [{\n                        data: dailyData.map(({ confirmed }) => confirmed),\n                        label: 'Infected',\n                        borderColor: '#3333ff',\n                        fill: true,\n                    }, {\n                        data: dailyData.map(({ deaths }) => deaths),\n                        label: 'Deaths',\n                        borderColor: 'rgba(170, 0, 0, 1)',\n                        backgroundColor: 'rgba(255 , 0, 0, .5)',\n                        fill: true,\n                    }]\n                }}\n            />\n            ) : null\n    );\n\n    const countryLineChart = (\n        data.length\n        ? (\n            <Line \n                data={{\n                    labels: data.map(({ date }) => date.split('T')[0]),\n                    datasets: [{\n                        data: data.map(({ confirmed }) => confirmed),\n                        label: 'Infected',\n                        borderColor: '#3333ff',\n                        fill: true,\n                    }, {\n                        data: data.map(({ deaths }) => deaths),\n                        label: 'Deaths',\n                        borderColor: 'rgba(170, 0, 0, 1)',\n                        backgroundColor: 'rgba(255, 0, 0, .5)',\n                        fill: true,\n                    }, {\n                        data: data.map(({ active }) => active),\n                        label: 'Active',\n                        borderColor: 'rgba(170, 170, 0, 1)',\n                        backgroundColor: 'rgba(255, 255, 0, .5)',\n                        fill: true,\n                    }, {\n                        data: data.map(({ recovered }) => recovered),\n                        label: 'Recovered',\n                        borderColor: 'green',\n                        backgroundColor: 'rgba(0, 255, 0, .5)',\n                        fill: true,\n                    }\n                \n                ]\n                }}\n            />\n        ) : <Typography style={{ fontSize: '24px' }}>We could not load data for this location, you can pick another one!</Typography>\n    );\n\n    return (\n        \n        <div className={styles.container}>\n            {country? countryLineChart : lineChart}\n        </div>\n    );\n};\n\nexport default Charts;","import React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl} from '@material-ui/core';\nimport { fetchCountries } from '../../api';\n\nimport styles from './CountryPicker.module.css';\n\nconst CountryPicker = ({ handleCountryChange }) => {\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries());\n        }\n\n        fetchAPI();\n    }, [setFetchedCountries]);\n\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={(ev) => handleCountryChange(ev.target.value)}>\n                <option value=\"\">Global</option>\n                {fetchedCountries.map((countryName, i) => <option key={i} value={countryName}>{countryName}</option> )}\n            </NativeSelect>\n        </FormControl>\n    );\n};\n\nexport default CountryPicker;\n","import React from 'react';\nimport { Cards, Charts, CountryPicker } from './components';\nimport { fetchData, fetchCountryHistory } from './api';\nimport { Typography, Link } from '@material-ui/core';\n\nimport styles from './App.module.css';\n\nimport image from './images/image.png';\n\nclass App extends React.Component {\n    \n    state = {\n        data: {},\n        country: '',\n        countryData: {}\n    }\n\n    async componentDidMount() {\n        const fetchedData = await fetchData();\n\n        this.setState({\n            data: fetchedData\n        });\n    }\n\n    handleCountryChange = async (country) => {\n        const countryHistory = await fetchCountryHistory(country);    \n\n        this.setState({\n            countryData: countryHistory,\n            country: country \n        });\n    };\n    \n    render() {\n        const {\n            data,\n            country,\n            countryData \n        } = this.state;\n\n        return (\n            <div className={styles.container}>\n                <img className={styles.image} src={image} alt=\"COVID-19\" />\n                <Cards data={data} />\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\n                <Charts data={countryData} country={country} />\n                <Typography style={{\n                    marginTop: '20px', \n                    fontSize: '12px', \n                    color: 'rgba(0, 0, 0, .5)'\n                    }}\n                >Global data has been fetched from this <Link href=\"https://covid19.mathdro.id/api\" target=\"_blank\">API</Link>, \n                \n                Country data has been fetched from this <Link href=\"https://documenter.getpostman.com/view/10808728/SzS8rjbc?version=latest\" target=\"_blank\">API</Link>.\n                </Typography>\n                 \n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};"],"sourceRoot":""}